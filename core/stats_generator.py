import os
import codecs
import logging
from tqdm import tqdm

# S·ª≠a ƒë·ªïi d√≤ng import d∆∞·ªõi ƒë√¢y
from .utils import find_project_files


def analyze_file(file_path):
    line_count, todo_count = 0, 0
    try:
        with codecs.open(file_path, "r", "utf-8") as f:
            for line in f:
                line_count += 1
                if "TODO" in line.upper():
                    todo_count += 1
    except (UnicodeDecodeError, IOError):
        return 0, 0
    return line_count, todo_count


def export_project_stats(project_path, output_file, exclude_dirs):
    project_root = os.path.abspath(project_path)
    logging.info(f"üìä Ch·∫ø ƒë·ªô Project Stats: ƒêang ph√¢n t√≠ch d·ª± √°n t·∫°i {project_root}")

    output_path = os.path.abspath(output_file)

    # S·ª≠ d·ª•ng h√†m find_project_files d√πng chung, qu√©t t·∫•t c·∫£ file text
    files_to_analyze = find_project_files(project_path, exclude_dirs, True, [])

    if not files_to_analyze:
        logging.info("   Kh√¥ng t√¨m th·∫•y file n√†o ƒë·ªÉ ph√¢n t√≠ch.")
        return

    logging.info(
        f"   T√¨m th·∫•y {len(files_to_analyze)} file. B·∫Øt ƒë·∫ßu thu th·∫≠p s·ªë li·ªáu..."
    )

    file_stats, total_lines, total_todos, stats_by_ext = [], 0, 0, {}
    for file_path in tqdm(
        sorted(files_to_analyze), desc="   Ph√¢n t√≠ch", unit=" file", ncols=100
    ):
        line_count, todo_count = analyze_file(file_path)
        if line_count > 0:
            total_lines += line_count
            total_todos += todo_count
            relative_path = os.path.relpath(file_path, project_root).replace(
                os.sep, "/"
            )
            file_stats.append({"path": relative_path, "lines": line_count})
            ext = os.path.splitext(file_path)[1] or "(no extension)"
            if ext not in stats_by_ext:
                stats_by_ext[ext] = {"count": 0, "lines": 0}
            stats_by_ext[ext]["count"] += 1
            stats_by_ext[ext]["lines"] += line_count

    file_stats.sort(key=lambda x: x["lines"], reverse=True)

    try:
        with codecs.open(output_path, "w", "utf-8") as outfile:
            outfile.write(
                f"B√ÅO C√ÅO D·ª∞ √ÅN: {os.path.basename(project_root)}\n" + "=" * 80 + "\n\n"
            )
            outfile.write("T·ªîNG QUAN\n" + "-" * 30 + "\n")
            outfile.write(f"- T·ªïng s·ªë file ƒë√£ ph√¢n t√≠ch: {len(file_stats):,}\n")
            outfile.write(f"- T·ªïng s·ªë d√≤ng: {total_lines:,}\n")
            outfile.write(f"- S·ªë l∆∞·ª£ng 'TODO' t√¨m th·∫•y: {total_todos}\n\n")
            outfile.write("TOP 5 FILE L·ªöN NH·∫§T (THEO S·ªê D√íNG)\n" + "-" * 30 + "\n")
            for i, stat in enumerate(file_stats[:5]):
                outfile.write(f"{i+1}. {stat['path']}: {stat['lines']:,} d√≤ng\n")
            outfile.write("\nPH√ÇN T√çCH THEO LO·∫†I FILE\n" + "-" * 30 + "\n")
            sorted_ext_stats = sorted(
                stats_by_ext.items(), key=lambda item: item[1]["count"], reverse=True
            )
            for ext, data in sorted_ext_stats:
                outfile.write(
                    f"- {ext:<15} : {data['count']:,} file(s), {data['lines']:,} d√≤ng\n"
                )
        logging.info(
            f"\n‚úÖ Ho√†n th√†nh! B√°o c√°o th·ªëng k√™ ƒë√£ ƒë∆∞·ª£c ghi v√†o file: {output_path}"
        )
    except Exception as e:
        logging.error(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói khi ghi file b√°o c√°o: {e}", exc_info=True)
