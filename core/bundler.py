import os
import codecs
from tqdm import tqdm
from .utils import get_gitignore_spec, is_text_file
from .tree_generator import generate_tree

def create_code_bundle(project_path, output_file, extensions, exclude_dirs, use_all_text_files, include_tree=True):
    """
    Qu√©t d·ª± √°n v√† gom n·ªôi dung c√°c file ƒë√£ ch·ªçn v√†o m·ªôt file duy nh·∫•t.

    Args:
        project_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n.
        output_file (str): T√™n c·ªßa file output ƒë·ªÉ ghi k·∫øt qu·∫£.
        extensions (list): Danh s√°ch c√°c ƒëu√¥i file c·∫ßn bao g·ªìm.
        exclude_dirs (set): T·∫≠p h·ª£p c√°c t√™n th∆∞ m·ª•c c·∫ßn lo·∫°i tr·ª´.
        use_all_text_files (bool): N·∫øu True, s·∫Ω bao g·ªìm t·∫•t c·∫£ c√°c file text v√† b·ªè qua `extensions`.
        include_tree (bool): N·∫øu True, s·∫Ω v·∫Ω c√¢y th∆∞ m·ª•c v√† ghi v√†o ƒë·∫ßu file output.
    """
    project_root = os.path.abspath(project_path)
    
    # Ch·ªâ in th√¥ng b√°o b·∫Øt ƒë·∫ßu n·∫øu ƒë√¢y l√† l·∫ßn ch·∫°y ƒë·∫ßu ti√™n (c√≥ v·∫Ω c√¢y th∆∞ m·ª•c)
    if include_tree:
        print(f"üöÄ B·∫Øt ƒë·∫ßu qu√©t d·ª± √°n t·∫°i: {project_root}")
    
    gitignore_spec = get_gitignore_spec(project_root)
    if gitignore_spec and include_tree:
        print("   ƒê√£ t√¨m th·∫•y v√† √°p d·ª•ng c√°c quy t·∫Øc t·ª´ .gitignore")
    
    output_path = os.path.abspath(output_file)
    
    try:
        # M·ªü file ·ªü ch·∫ø ƒë·ªô 'w' ƒë·ªÉ ghi ƒë√® to√†n b·ªô n·ªôi dung
        with codecs.open(output_path, 'w', 'utf-8') as outfile:
            if include_tree:
                print("   ƒêang t·∫°o c√¢y th∆∞ m·ª•c...")
                tree_structure = generate_tree(project_root, exclude_dirs, gitignore_spec)
                outfile.write(f"T·ªïng h·ª£p code t·ª´ d·ª± √°n: {os.path.basename(project_root)}\n")
                outfile.write("=" * 80 + "\n\n")
                outfile.write("C·∫§U TR√öC TH∆Ø M·ª§C\n")
                outfile.write("-" * 80 + "\n")
                outfile.write(f"{os.path.basename(project_root)}/\n")
                outfile.write(tree_structure)
                outfile.write("\n\n" + "=" * 80 + "\n\n")

        # T√¨m t·∫•t c·∫£ c√°c file ph√π h·ª£p ƒë·ªÉ x·ª≠ l√Ω
        files_to_process = []
        for dirpath, dirnames, filenames in os.walk(project_root, topdown=True):
            # Lo·∫°i b·ªè c√°c th∆∞ m·ª•c kh√¥ng c·∫ßn thi·∫øt ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô
            dirnames[:] = [d for d in dirnames if d not in exclude_dirs and not d.startswith('.')]
            
            relative_dir_path = os.path.relpath(dirpath, project_root).replace(os.sep, '/')
            if gitignore_spec and gitignore_spec.match_file(relative_dir_path if relative_dir_path != '.' else ''):
                continue
            
            for filename in sorted(filenames):
                file_path = os.path.join(dirpath, filename)
                relative_file_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
                
                # B·ªè qua file n·∫øu n√≥ kh·ªõp v·ªõi quy t·∫Øc trong .gitignore
                if not (gitignore_spec and gitignore_spec.match_file(relative_file_path)):
                    should_include = False
                    if use_all_text_files:
                        if is_text_file(file_path):
                            should_include = True
                    elif filename.endswith(tuple(extensions)):
                        should_include = True
                    
                    if should_include:
                        files_to_process.append(file_path)
        
        if include_tree:
            print(f"   T√¨m th·∫•y {len(files_to_process)} file ph√π h·ª£p. B·∫Øt ƒë·∫ßu t·ªïng h·ª£p n·ªôi dung...")
        
        # N·ªëi n·ªôi dung c√°c file v√†o file output
        # M·ªü file ·ªü ch·∫ø ƒë·ªô 'a' (append) ƒë·ªÉ ghi ti·∫øp v√†o file ƒë√£ c√≥ header
        with codecs.open(output_path, 'a', 'utf-8') as outfile:
            # S·ª≠ d·ª•ng tqdm n·∫øu ƒë√¢y l√† l·∫ßn ch·∫°y ƒë·∫ßu ƒë·ªÉ c√≥ progress bar
            iterable = tqdm(sorted(files_to_process), desc="   ƒêang x·ª≠ l√Ω", unit=" file", ncols=100) if include_tree else sorted(files_to_process)
            
            for file_path in iterable:
                relative_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
                try:
                    with codecs.open(file_path, 'r', 'utf-8') as infile:
                        content = infile.read()
                    
                    outfile.write(f"--- FILE: {relative_path} ---\n\n")
                    outfile.write(content)
                    outfile.write("\n\n" + "=" * 80 + "\n\n")
                except Exception as e:
                    # Ghi l·ªói ra m√†n h√¨nh m√† kh√¥ng d·ª´ng ch∆∞∆°ng tr√¨nh
                    error_message = f"   [L·ªñI] Kh√¥ng th·ªÉ ƒë·ªçc file {relative_path}: {e}"
                    if include_tree:
                        tqdm.write(error_message)
                    else:
                        print(error_message)
        
        if include_tree:
            print(f"\n‚úÖ Ho√†n th√†nh! To√†n b·ªô code ƒë√£ ƒë∆∞·ª£c ghi v√†o file: {output_path}")

    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng: {e}")