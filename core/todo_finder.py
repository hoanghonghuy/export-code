import os
import codecs
from tqdm import tqdm
from .utils import get_gitignore_spec, is_binary

# C√°c t·ª´ kh√≥a c·∫ßn t√¨m ki·∫øm (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
KEYWORDS = ['TODO', 'FIXME', 'HACK', 'XXX', 'NOTE']

def find_todos_in_file(file_path):
    """Qu√©t m·ªôt file duy nh·∫•t ƒë·ªÉ t√¨m c√°c d√≤ng ch·ª©a t·ª´ kh√≥a."""
    found_todos = []
    try:
        with codecs.open(file_path, 'r', 'utf-8') as f:
            for i, line in enumerate(f, 1):
                line_upper = line.upper()
                for keyword in KEYWORDS:
                    if keyword in line_upper:
                        # T√¨m th·∫•y m·ªôt d√≤ng, l∆∞u l·∫°i th√¥ng tin
                        found_todos.append({
                            'line_num': i,
                            'content': line.strip()
                        })
                        break # Chuy·ªÉn sang d√≤ng ti·∫øp theo khi ƒë√£ t√¨m th·∫•y m·ªôt t·ª´ kh√≥a
    except (UnicodeDecodeError, IOError):
        # B·ªè qua c√°c file kh√¥ng ƒë·ªçc ƒë∆∞·ª£c
        return []
    return found_todos

def export_todo_report(project_path, output_file, exclude_dirs):
    """Qu√©t to√†n b·ªô d·ª± √°n v√† t·∫°o b√°o c√°o TODO."""
    project_root = os.path.abspath(project_path)
    print(f"üìù Ch·∫ø ƒë·ªô TODO Report: ƒêang qu√©t d·ª± √°n t·∫°i {project_root}")

    gitignore_spec = get_gitignore_spec(project_root)
    output_path = os.path.abspath(output_file)

    files_to_analyze = []
    for dirpath, dirnames, filenames in os.walk(project_root, topdown=True):
        dirnames[:] = [d for d in dirnames if d not in set(exclude_dirs) and not d.startswith('.')]
        
        relative_dir_path = os.path.relpath(dirpath, project_root).replace(os.sep, '/')
        if gitignore_spec and gitignore_spec.match_file(relative_dir_path if relative_dir_path != '.' else ''):
            continue
            
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            relative_file_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
            if not (gitignore_spec and gitignore_spec.match_file(relative_file_path)):
                # Ch·ªâ ph√¢n t√≠ch file text
                if not is_binary(file_path):
                    files_to_analyze.append(file_path)

    if not files_to_analyze:
        print("   Kh√¥ng t√¨m th·∫•y file n√†o ƒë·ªÉ ph√¢n t√≠ch.")
        return

    print(f"   T√¨m th·∫•y {len(files_to_analyze)} file. B·∫Øt ƒë·∫ßu thu th·∫≠p ghi ch√∫...")

    # Dictionary ƒë·ªÉ l∆∞u k·∫øt qu·∫£: {'path/to/file': [todo1, todo2]}
    all_todos = {}
    total_todo_count = 0

    for file_path in tqdm(sorted(files_to_analyze), desc="   ƒêang qu√©t", unit=" file", ncols=100):
        todos_in_file = find_todos_in_file(file_path)
        if todos_in_file:
            relative_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
            all_todos[relative_path] = todos_in_file
            total_todo_count += len(todos_in_file)

    # Ghi k·∫øt qu·∫£ ra file b√°o c√°o
    try:
        with codecs.open(output_path, 'w', 'utf-8') as outfile:
            outfile.write(f"B√ÅO C√ÅO TODO D·ª∞ √ÅN: {os.path.basename(project_root)}\n")
            outfile.write(f"T·ªïng s·ªë ghi ch√∫ t√¨m th·∫•y: {total_todo_count}\n")
            outfile.write("=" * 80 + "\n\n")

            if not all_todos:
                outfile.write("üéâ Tuy·ªát v·ªùi! Kh√¥ng t√¨m th·∫•y ghi ch√∫ TODO n√†o.\n")
            else:
                # S·∫Øp x·∫øp file theo t√™n ƒë·ªÉ b√°o c√°o nh·∫•t qu√°n
                for file_path in sorted(all_todos.keys()):
                    outfile.write(f"--- FILE: {file_path} ---\n")
                    for todo in all_todos[file_path]:
                        outfile.write(f"- [D√≤ng {todo['line_num']}] {todo['content']}\n")
                    outfile.write("\n")

        print(f"\n‚úÖ Ho√†n th√†nh! B√°o c√°o TODO ƒë√£ ƒë∆∞·ª£c ghi v√†o file: {output_path}")

    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói khi ghi file b√°o c√°o: {e}")