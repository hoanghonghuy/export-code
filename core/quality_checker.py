import os
import subprocess

# --- C·∫§U H√åNH ---

# √Ånh x·∫° t·ª´ ƒëu√¥i file sang l·ªánh formatter
FORMATTER_MAPPING = {
    '.py': 'black'
}

# √Ånh x·∫° t·ª´ ƒëu√¥i file sang l·ªánh linter
LINTER_MAPPING = {
    '.py': 'flake8'
}

# --- C√ÅC H√ÄM X·ª¨ L√ù ---

def format_project_files(files_to_process):
    """Ch·∫°y formatter tr√™n m·ªôt danh s√°ch c√°c file."""
    if not files_to_process:
        print("   Kh√¥ng t√¨m th·∫•y file n√†o ph√π h·ª£p ƒë·ªÉ format.")
        return
    print(f"   T√¨m th·∫•y {len(files_to_process)} file. B·∫Øt ƒë·∫ßu format...")
    _run_tool("formatter", FORMATTER_MAPPING, files_to_process)


def lint_project_files(files_to_process):
    """Ch·∫°y linter tr√™n m·ªôt danh s√°ch c√°c file."""
    if not files_to_process:
        print("   Kh√¥ng t√¨m th·∫•y file n√†o ph√π h·ª£p ƒë·ªÉ lint.")
        return
    print(f"   T√¨m th·∫•y {len(files_to_process)} file. B·∫Øt ƒë·∫ßu ph√¢n t√≠ch (lint)...")
    _run_tool("linter", LINTER_MAPPING, files_to_process)


def _run_tool(tool_type, mapping, files_to_process):
    """
    H√†m n·ªôi b·ªô ƒë·ªÉ ch·∫°y m·ªôt c√¥ng c·ª• (formatter ho·∫∑c linter) tr√™n c√°c file.
    """
    files_by_tool = {}
    for file_path in files_to_process:
        ext = os.path.splitext(file_path)[1]
        tool_cmd = mapping.get(ext)
        if tool_cmd:
            if tool_cmd not in files_by_tool:
                files_by_tool[tool_cmd] = []
            files_by_tool[tool_cmd].append(file_path)

    if not files_by_tool:
        print(f"   Kh√¥ng c√≥ {tool_type} n√†o ƒë∆∞·ª£c c·∫•u h√¨nh cho c√°c file ƒë√£ t√¨m th·∫•y.")
        return

    had_errors = False
    for tool_cmd, files in files_by_tool.items():
        command = tool_cmd.split() + files
        try:
            action_verb = "ƒêang ch·∫°y"
            if tool_type == "formatter": action_verb = "ƒêang format"
            elif tool_type == "linter": action_verb = "ƒêang ph√¢n t√≠ch"
            
            print(f"\n‚ñ∂Ô∏è  {action_verb} {len(files)} file v·ªõi '{tool_cmd}'...")
            
            # check=False ƒë·ªÉ ch∆∞∆°ng tr√¨nh kh√¥ng crash khi linter t√¨m th·∫•y l·ªói (exit code != 0)
            result = subprocess.run(command, capture_output=True, text=True)

            if result.stdout:
                print("--- Output ---")
                print(result.stdout)
            if result.stderr:
                print("--- L·ªói ---")
                print(result.stderr)

            if result.returncode != 0:
                had_errors = True
                if tool_type == "linter":
                    print(f"‚ö†Ô∏è  '{tool_cmd}' ƒë√£ t√¨m th·∫•y m·ªôt s·ªë v·∫•n ƒë·ªÅ c·∫ßn xem l·∫°i.")
                else:
                    print(f"‚ùå L·ªñI: '{tool_cmd}' ƒë√£ tho√°t v·ªõi m√£ l·ªói {result.returncode}.")
            else:
                print(f"‚úÖ Ho√†n th√†nh v·ªõi '{tool_cmd}'. Kh√¥ng t√¨m th·∫•y v·∫•n ƒë·ªÅ n√†o.")

        except FileNotFoundError:
            print(f"‚ùå L·ªñI: Kh√¥ng t√¨m th·∫•y l·ªánh '{tool_cmd}'. H√£y ch·∫Øc ch·∫Øn r·∫±ng n√≥ ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c√≥ trong PATH.")
            had_errors = True
        except Exception as e:
            print(f"‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ch·∫°y '{tool_cmd}': {e}")
            had_errors = True
    
    if not had_errors:
        print(f"\nüéâ Ph√¢n t√≠ch ho√†n t·∫•t. M·ªçi th·ª© ƒë·ªÅu ·ªïn!")