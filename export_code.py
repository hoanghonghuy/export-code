import os
import argparse
import codecs
import pathspec
from tqdm import tqdm
import json

# --- C·∫§U H√åNH ---
SCRIPT_DIR = os.path.dirname(__file__)
CONFIG_FILE = os.path.join(SCRIPT_DIR, 'config.json')
DEFAULT_EXCLUDE_DIRS = ['.expo', '.git', '.vscode', 'bin', 'obj', 'dist', '__pycache__']
# --- K·∫æT TH√öC ---

def load_profiles():
    """T·∫£i c√°c profile t·ª´ file config.json."""
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            try:
                config = json.load(f)
                return config.get('profiles', {})
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è  C·∫£nh b√°o: File 'config.json' kh√¥ng h·ª£p l·ªá. B·ªè qua c√°c profile.")
                return {}
    print("‚ö†Ô∏è  C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y file 'config.json'. S·∫Ω s·ª≠ d·ª•ng c√°c c√†i ƒë·∫∑t m·∫∑c ƒë·ªãnh.")
    return {}

def is_text_file(filepath, blocksize=1024):
    """
    S·ª≠ d·ª•ng thu·∫≠t to√°n ƒë·ªÉ ƒëo√°n xem m·ªôt file c√≥ ph·∫£i l√† file text hay kh√¥ng.
    N√≥ ho·∫°t ƒë·ªông b·∫±ng c√°ch ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa byte NULL trong m·ªôt ƒëo·∫°n ƒë·∫ßu c·ªßa file.
    """
    try:
        with open(filepath, 'rb') as f:
            block = f.read(blocksize)
            # File r·ªóng ƒë∆∞·ª£c coi l√† file text
            if not block:
                return True
            # N·∫øu t√¨m th·∫•y byte NULL (b'\x00'), kh·∫£ nƒÉng cao ƒë√¢y l√† file binary
            if b'\x00' in block:
                return False
    except Exception:
        return False
    return True

def get_gitignore_spec(root_dir):
    gitignore_path = os.path.join(root_dir, '.gitignore')
    if os.path.exists(gitignore_path):
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            return pathspec.GitIgnoreSpec.from_lines(f.read().splitlines())
    return None

def generate_tree(root_dir, exclude_dirs, gitignore_spec):
    tree_lines = []
    exclude_set = set(exclude_dirs)
    for dirpath, dirnames, filenames in os.walk(root_dir, topdown=True):
        relative_path = os.path.relpath(dirpath, root_dir)
        if relative_path != "." and (gitignore_spec and gitignore_spec.match_file(relative_path.replace(os.sep, '/'))):
            dirnames[:] = []
            continue
        dirnames[:] = [d for d in dirnames if d not in exclude_set and not d.startswith('.')]
        level = relative_path.count(os.sep) + 1 if relative_path != "." else 0
        if level > 0:
            indent = '‚îÇ   ' * (level - 1) + '‚îú‚îÄ‚îÄ '
            tree_lines.append(f"{indent}{os.path.basename(dirpath)}/")
        sub_indent = '‚îÇ   ' * level
        files_to_print = []
        for f in sorted(filenames):
            file_rel_path = os.path.join(relative_path, f).replace(os.sep, '/') if relative_path != '.' else f
            if not (gitignore_spec and gitignore_spec.match_file(file_rel_path)):
                 files_to_print.append(f)
        for i, f in enumerate(files_to_print):
            connector = '‚îî‚îÄ‚îÄ ' if i == len(files_to_print) - 1 else '‚îú‚îÄ‚îÄ '
            tree_lines.append(f"{sub_indent}{connector}{f}")
    return "\n".join(tree_lines)

def create_code_bundle(project_path, output_file, extensions, exclude_dirs, use_all_text_files):
    project_root = os.path.abspath(project_path)
    print(f"üöÄ B·∫Øt ƒë·∫ßu qu√©t d·ª± √°n t·∫°i: {project_root}")
    gitignore_spec = get_gitignore_spec(project_root)
    if gitignore_spec:
        print("   ƒê√£ t√¨m th·∫•y v√† √°p d·ª•ng c√°c quy t·∫Øc t·ª´ .gitignore")
    output_path = os.path.abspath(output_file)
    try:
        print("   ƒêang t·∫°o c√¢y th∆∞ m·ª•c...")
        tree_structure = generate_tree(project_root, exclude_dirs, gitignore_spec)
        with codecs.open(output_path, 'w', 'utf-8') as outfile:
            outfile.write(f"T·ªïng h·ª£p code t·ª´ d·ª± √°n: {os.path.basename(project_root)}\n")
            outfile.write("=" * 80 + "\n\n")
            outfile.write("C·∫§U TR√öC TH∆Ø M·ª§C\n")
            outfile.write("-" * 80 + "\n")
            outfile.write(f"{os.path.basename(project_root)}/\n")
            outfile.write(tree_structure)
            outfile.write("\n\n" + "=" * 80 + "\n\n")
        
        files_to_process = []
        for dirpath, dirnames, filenames in os.walk(project_root, topdown=True):
            dirnames[:] = [d for d in dirnames if d not in exclude_dirs and not d.startswith('.')]
            relative_dir_path = os.path.relpath(dirpath, project_root).replace(os.sep, '/')
            if gitignore_spec and gitignore_spec.match_file(relative_dir_path if relative_dir_path != '.' else ''):
                continue
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                relative_file_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
                if not (gitignore_spec and gitignore_spec.match_file(relative_file_path)):
                    should_include = False
                    if use_all_text_files:
                        if is_text_file(file_path):
                            should_include = True
                    elif filename.endswith(tuple(extensions)):
                        should_include = True
                    
                    if should_include:
                        files_to_process.append(file_path)
                        
        print(f"   T√¨m th·∫•y {len(files_to_process)} file ph√π h·ª£p. B·∫Øt ƒë·∫ßu t·ªïng h·ª£p n·ªôi dung...")
        for file_path in tqdm(sorted(files_to_process), desc="   ƒêang x·ª≠ l√Ω", unit=" file", ncols=100):
            relative_path = os.path.relpath(file_path, project_root)
            try:
                with codecs.open(file_path, 'r', 'utf-8') as infile:
                    content = infile.read()
                with codecs.open(output_path, 'a', 'utf-8') as outfile:
                    outfile.write(f"--- FILE: {relative_path} ---\n\n")
                    outfile.write(content)
                    outfile.write("\n\n" + "=" * 80 + "\n\n")
            except Exception as e:
                tqdm.write(f"   [L·ªñI] Kh√¥ng th·ªÉ ƒë·ªçc file {relative_path}: {e}")
        print(f"\n‚úÖ Ho√†n th√†nh! To√†n b·ªô code ƒë√£ ƒë∆∞·ª£c ghi v√†o file: {output_path}")
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng: {e}")

def main():
    profiles = load_profiles()
    default_extensions = profiles.get('default', {}).get('extensions', [])
    parser = argparse.ArgumentParser(description="Gom code d·ª± √°n v√†o m·ªôt file text duy nh·∫•t.")
    
    parser.add_argument("project_path", nargs='?', default=".", help="ƒê∆∞·ªùng d·∫´n d·ª± √°n. (m·∫∑c ƒë·ªãnh: .)")
    parser.add_argument("-o", "--output", default="all_code.txt", help="T√™n file output. (m·∫∑c ƒë·ªãnh: all_code.txt)")
    parser.add_argument("-p", "--profile", nargs='+', choices=profiles.keys(), help="Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu profile c√≥ s·∫µn.")
    parser.add_argument("-e", "--ext", nargs='+', help=f"Ghi ƒë√® danh s√°ch ƒëu√¥i file c·∫ßn l·∫•y.")
    parser.add_argument("-a", "--all", action="store_true", help="Xu·∫•t t·∫•t c·∫£ c√°c file d·∫°ng text (tr·ª´ file binary).")
    parser.add_argument("--exclude", nargs='+', default=DEFAULT_EXCLUDE_DIRS, help=f"Th∆∞ m·ª•c c·∫ßn b·ªè qua.")
    parser.add_argument("--tree-only", action="store_true", help="Ch·ªâ in ra c·∫•u tr√∫c c√¢y th∆∞ m·ª•c v√† tho√°t.")
    
    args = parser.parse_args()

    extensions_to_use = []
    if not args.all:
        if args.ext:
            extensions_to_use = args.ext
            print(f"   S·ª≠ d·ª•ng danh s√°ch ƒëu√¥i file t√πy ch·ªânh: {' '.join(extensions_to_use)}")
        elif args.profile:
            combined_extensions = set()
            for profile_name in args.profile:
                profile_extensions = profiles.get(profile_name, {}).get('extensions', [])
                combined_extensions.update(profile_extensions)
            extensions_to_use = sorted(list(combined_extensions))
            print(f"   S·ª≠ d·ª•ng k·∫øt h·ª£p profile '{', '.join(args.profile)}': {' '.join(extensions_to_use)}")
        else:
            extensions_to_use = default_extensions
            print(f"   S·ª≠ d·ª•ng profile 'default': {' '.join(extensions_to_use)}")
    else:
         print("   Ch·∫ø ƒë·ªô --all: S·∫Ω qu√©t t·∫•t c·∫£ c√°c file text h·ª£p l·ªá.")

    if args.tree_only:
        project_root = os.path.abspath(args.project_path)
        print(f"üå≥ T·∫°o c√¢y th∆∞ m·ª•c cho: {project_root}")
        gitignore_spec = get_gitignore_spec(project_root)
        if gitignore_spec:
            print("   √Åp d·ª•ng c√°c quy t·∫Øc t·ª´ .gitignore")
        tree_structure = generate_tree(project_root, set(args.exclude), gitignore_spec)
        print("-" * 50)
        print(f"{os.path.basename(project_root)}/")
        print(tree_structure)
        print("-" * 50)
    else:
        create_code_bundle(args.project_path, args.output, extensions_to_use, set(args.exclude), args.all)

if __name__ == "__main__":
    main()

