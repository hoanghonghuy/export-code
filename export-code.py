import os
import argparse
import codecs

# --- C·∫§U H√åNH M·∫∂C ƒê·ªäNH ---
DEFAULT_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.json', '.md', '.html', '.css', '.py', '.cs']
DEFAULT_EXCLUDE_DIRS = ['node_modules', '.expo', '.git', '.vscode', 'assets', 'bin', 'obj', 'dist', '__pycache__']
# --- K·∫æT TH√öC C·∫§U H√åNH ---

def generate_tree(root_dir, exclude_dirs):
    """
    T·∫°o ra m·ªôt chu·ªói string bi·ªÉu di·ªÖn c·∫•u tr√∫c c√¢y th∆∞ m·ª•c.
    """
    tree_lines = []
    exclude_dirs = set(exclude_dirs)

    for dirpath, dirnames, filenames in os.walk(root_dir, topdown=True):
        # L·ªçc ra c√°c th∆∞ m·ª•c kh√¥ng mu·ªën duy·ªát
        dirnames[:] = [d for d in dirnames if d not in exclude_dirs and not d.startswith('.')]
        
        # B·ªè qua th∆∞ m·ª•c g·ªëc n·∫øu n√≥ n·∫±m trong danh s√°ch lo·∫°i tr·ª´ (v√≠ d·ª•: qu√©t ch√≠nh n√≥)
        if os.path.basename(dirpath) in exclude_dirs:
            continue
            
        level = dirpath.replace(root_dir, '').count(os.sep)
        indent = '‚îÇ   ' * (level - 1) + ('‚îú‚îÄ‚îÄ ' if level > 0 else '')
        
        # Ch·ªâ hi·ªÉn th·ªã t√™n th∆∞ m·ª•c con, kh√¥ng ph·∫£i ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
        dir_display_name = os.path.basename(dirpath)
        if level > 0:
            tree_lines.append(f"{indent}{dir_display_name}/")

        sub_indent = '‚îÇ   ' * level
        for i, f in enumerate(sorted(filenames)):
            connector = '‚îî‚îÄ‚îÄ ' if i == len(filenames) - 1 else '‚îú‚îÄ‚îÄ '
            tree_lines.append(f"{sub_indent}{connector}{f}")
            
    return "\n".join(tree_lines)


def create_code_bundle(project_path, output_file, extensions, exclude_dirs):
    """
    Duy·ªát qua th∆∞ m·ª•c d·ª± √°n v√† gom code v√†o m·ªôt file duy nh·∫•t.
    """
    project_root = os.path.abspath(project_path)
    print(f"üöÄ B·∫Øt ƒë·∫ßu qu√©t d·ª± √°n t·∫°i: {project_root}")
    
    output_path = os.path.abspath(output_file)

    try:
        # --- B∆Ø·ªöC 1: T·∫†O C·∫§U TR√öC C√ÇY TH∆Ø M·ª§C ---
        print("   ƒêang t·∫°o c√¢y th∆∞ m·ª•c...")
        tree_structure = generate_tree(project_root, exclude_dirs)
        
        # --- B∆Ø·ªöC 2: GHI FILE OUTPUT ---
        with codecs.open(output_path, 'w', 'utf-8') as outfile:
            outfile.write(f"T·ªïng h·ª£p code t·ª´ d·ª± √°n: {os.path.basename(project_root)}\n")
            outfile.write("=" * 80 + "\n\n")
            outfile.write("C·∫§U TR√öC TH∆Ø M·ª§C\n")
            outfile.write("-" * 80 + "\n")
            outfile.write(f"{os.path.basename(project_root)}/\n")
            outfile.write(tree_structure)
            outfile.write("\n\n" + "=" * 80 + "\n\n")

        # --- B∆Ø·ªöC 3: DUY·ªÜT V√Ä GHI N·ªòI DUNG T·ª™NG FILE ---
        for dirpath, dirnames, filenames in os.walk(project_root, topdown=True):
            dirnames[:] = [d for d in dirnames if d not in exclude_dirs and not d.startswith('.')]
            if os.path.basename(dirpath) in exclude_dirs:
                continue

            for filename in sorted(filenames):
                if filename.endswith(tuple(extensions)):
                    file_path = os.path.join(dirpath, filename)
                    relative_path = os.path.relpath(file_path, project_root)
                    
                    print(f"   ƒêang x·ª≠ l√Ω: {relative_path}")

                    try:
                        with codecs.open(file_path, 'r', 'utf-8') as infile:
                            content = infile.read()
                        
                        with codecs.open(output_path, 'a', 'utf-8') as outfile:
                            outfile.write(f"--- FILE: {relative_path} ---\n\n")
                            outfile.write(content)
                            outfile.write("\n\n" + "=" * 80 + "\n\n")

                    except Exception as e:
                        print(f"   [L·ªñI] Kh√¥ng th·ªÉ ƒë·ªçc file {relative_path}: {e}")

        print(f"\n‚úÖ Ho√†n th√†nh! To√†n b·ªô code ƒë√£ ƒë∆∞·ª£c ghi v√†o file: {output_path}")

    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng: {e}")

def main():
    parser = argparse.ArgumentParser(
        description="M·ªôt c√¥ng c·ª• d√≤ng l·ªánh ƒë·ªÉ duy·ªát v√† gom t·∫•t c·∫£ file code trong m·ªôt d·ª± √°n v√†o m·ªôt file text duy nh·∫•t."
    )
    
    parser.add_argument(
        "project_path", 
        nargs='?', 
        default=".", 
        help="ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c d·ª± √°n c·∫ßn qu√©t. (m·∫∑c ƒë·ªãnh: th∆∞ m·ª•c hi·ªán t·∫°i)"
    )
    parser.add_argument(
        "-o", "--output", 
        default="all_code.txt", 
        help="T√™n file output. (m·∫∑c ƒë·ªãnh: all_code.txt)"
    )
    parser.add_argument(
        "-e", "--ext", 
        nargs='+', 
        default=DEFAULT_EXTENSIONS,
        help=f"Danh s√°ch c√°c ƒëu√¥i file c·∫ßn l·∫•y. (m·∫∑c ƒë·ªãnh: {' '.join(DEFAULT_EXTENSIONS)})"
    )
    parser.add_argument(
        "--exclude", 
        nargs='+', 
        default=DEFAULT_EXCLUDE_DIRS,
        help=f"Danh s√°ch c√°c th∆∞ m·ª•c c·∫ßn b·ªè qua. (m·∫∑c ƒë·ªãnh: {' '.join(DEFAULT_EXCLUDE_DIRS)})"
    )

    args = parser.parse_args()
    
    create_code_bundle(args.project_path, args.output, args.ext, set(args.exclude))

if __name__ == "__main__":
    main()